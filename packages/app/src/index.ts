
import find from "lodash.find";
import console from "loglevel";
import { AeroGearConfiguration, ServiceConfiguration, MetricsService } from "@aerogear/core";

/**
 * Abstraction for AeroGear configuration
 */
export class ConfigurationService {
  private configurations?: ServiceConfiguration[];

  /**
  * @param config configuration that should be injected to all available SDK's
  */
  public constructor(config: AeroGearConfiguration) {
    this.configurations = config.services;
  }

  /**
  * Get a service configuration object, provided an existing type is given
  * @param type - The type of the service
  */
  public getConfigByType(type: string): ServiceConfiguration[] | undefined {
    if (this.configurations) {
      return this.configurations.filter(service => service.type && service.type.toLowerCase() === type.toLowerCase());
    }
  }

  /**
   * Get a service configuration object, provided an existing id is given
   * @param id - unique id of the service
   */
  public getConfigById(id: string): ServiceConfiguration | undefined {
    if (this.configurations) {
      return find(this.configurations, service => {
        return !!service.id && service.id.toLowerCase() === id.toLowerCase();
      });
    }
    console.error("Configuration not initialized.");
  }
}

export class AeroGearApp {

  public metrics?: MetricsService;
  public config?: ConfigurationService;

  constructor(config: AeroGearConfiguration) {
    this.config = new ConfigurationService(config);
    const metricsConfig = this.config.getConfigByType(MetricsService.TYPE);
    if (metricsConfig) {
      const metricsOptions = {
        configuration: metricsConfig
      };
      this.metrics = new MetricsService(metricsOptions);
    }
  }
}

/**
 * Initialize all platform SDK's by using configuration generated by AeroGear command line client
 *
 * @param config object containing SDK. Object can be read from file or pasted directly in source code.
 */
export const init = (config: AeroGearConfiguration): AeroGearApp => {
  return new AeroGearApp(config);
};
